// <auto-generated />
using System;
using HouseBroker.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HouseBroker.Infrastructure.Migrations
{
    [DbContext(typeof(HouseBrokerDbContext))]
    [Migration("20250712174222_UpdateFeatureColumnToString")]
    partial class UpdateFeatureColumnToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HouseBroker.Domain.Entities.Agency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Agency");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b00f6552-9686-4970-90b2-244311a5b853"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Himalayan Agency"
                        });
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Broker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Broker");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab6d666f-9448-45ed-9a30-d32e5eaca420"),
                            AgencyId = new Guid("b00f6552-9686-4970-90b2-244311a5b853"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            LicenseNumber = "LI209",
                            UserId = new Guid("222787ea-adb1-484a-a8d1-d479917d2944")
                        });
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4795abe-b91e-44fd-af4e-cf4c37cb52f6"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Kathmandu"
                        },
                        new
                        {
                            Id = new Guid("6fd08bf7-7d4f-4ce5-bc07-d29f4097c50f"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Bhaktapur"
                        },
                        new
                        {
                            Id = new Guid("9e1766d4-8403-4cf4-8c31-e2ebf823c809"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Lalitpur"
                        });
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.HouseSeeker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HouseSeeker");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f071d575-7072-4709-858f-413853d8969b"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            UserId = new Guid("333787ea-adb1-484a-a8d1-d479917d2945")
                        });
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId", "Area", "PostalCode")
                        .IsUnique();

                    b.ToTable("Location");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImage");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e7f0adc-ef00-4786-9990-878f480166d9"),
                            ConcurrencyStamp = "ede5316e-372d-40a7-8538-95c4ca18e67a",
                            CreatedBy = new Guid("111787ea-adb1-484a-a8d1-d479917d2943"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            RoleType = 1
                        },
                        new
                        {
                            Id = new Guid("144baf4b-fa9d-4b1b-83ff-c2c3f5623c9a"),
                            ConcurrencyStamp = "40d714a1-fa17-4a7a-b366-76abd113af4f",
                            CreatedBy = new Guid("111787ea-adb1-484a-a8d1-d479917d2943"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Broker",
                            NormalizedName = "BROKER",
                            RoleType = 2
                        },
                        new
                        {
                            Id = new Guid("565d1c18-56a9-4b2e-8d65-af477cd2650a"),
                            ConcurrencyStamp = "337312f0-89d3-4c4a-ae66-0a05d8e2dc46",
                            CreatedBy = new Guid("111787ea-adb1-484a-a8d1-d479917d2943"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "HouseSeeker",
                            NormalizedName = "HOUSESEEKER",
                            RoleType = 3
                        });
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("111787ea-adb1-484a-a8d1-d479917d2943"),
                            AccessFailedCount = 0,
                            Address = "Kathmandu",
                            ConcurrencyStamp = "a6e1df21-e620-404e-a6a7-89c05da71e33",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "adming@housebroker.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "HouseBroker",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOUSEBROKER.COM",
                            NormalizedUserName = "ADMIN@HOUSEBROKER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGS5P/Zckp606UPZS9j9uVcU8CIgdAw2N1AYZVOfIEuHfAsQ2mFOSekZFNsAuW9TVQ==",
                            PhoneNumber = "9876543210",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ef831113-98d4-4505-8b34-c3c1022f8f77",
                            TwoFactorEnabled = false,
                            UserName = "adming@housebroker.com"
                        },
                        new
                        {
                            Id = new Guid("222787ea-adb1-484a-a8d1-d479917d2944"),
                            AccessFailedCount = 0,
                            Address = "Pokhara",
                            ConcurrencyStamp = "bf229b22-1234-5678-9abc-def123456789",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "broker@housebroker.com",
                            EmailConfirmed = true,
                            FirstName = "Broker",
                            IsDeleted = false,
                            LastName = "HouseBroker",
                            LockoutEnabled = false,
                            NormalizedEmail = "BROKER@HOUSEBROKER.COM",
                            NormalizedUserName = "BROKER@HOUSEBROKER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI3H1q/2HDAJE8XyjAzhmUwifMiBnvDMPS2IY6AU5R4vtHjgFq33oq7HwIZWaHYskg==",
                            PhoneNumber = "9123456780",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bf229b22-1234-5678-9abc-def123456789",
                            TwoFactorEnabled = false,
                            UserName = "broker@housebroker.com"
                        },
                        new
                        {
                            Id = new Guid("333787ea-adb1-484a-a8d1-d479917d2945"),
                            AccessFailedCount = 0,
                            Address = "Biratnagar",
                            ConcurrencyStamp = "cf338c33-2345-6789-abcd-ef2345678901",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2025, 7, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seeker@housebroker.com",
                            EmailConfirmed = true,
                            FirstName = "Seeker",
                            IsDeleted = false,
                            LastName = "HouseBroker",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEKER@HOUSEBROKER.COM",
                            NormalizedUserName = "SEEKER@HOUSEBROKER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGuJeVpNH1SERkiRBRgNHK66BZJFaWaCbWPX3MXi6dDyGbZZ8VCVx7k42kdVEl+rQ==",
                            PhoneNumber = "9001234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cf338c33-2345-6789-abcd-ef2345678901",
                            TwoFactorEnabled = false,
                            UserName = "seeker@housebroker.com"
                        });
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("111787ea-adb1-484a-a8d1-d479917d2943"),
                            RoleId = new Guid("9e7f0adc-ef00-4786-9990-878f480166d9"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = new Guid("222787ea-adb1-484a-a8d1-d479917d2944"),
                            RoleId = new Guid("144baf4b-fa9d-4b1b-83ff-c2c3f5623c9a"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = new Guid("333787ea-adb1-484a-a8d1-d479917d2945"),
                            RoleId = new Guid("565d1c18-56a9-4b2e-8d65-af477cd2650a"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Broker", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("HouseBroker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.HouseSeeker", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Location", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Property", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HouseBroker.Domain.Entities.Location", "Location")
                        .WithMany("PropertyListings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.PropertyImage", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HouseBroker.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HouseBroker.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Location", b =>
                {
                    b.Navigation("PropertyListings");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HouseBroker.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
